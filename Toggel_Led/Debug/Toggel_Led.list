
Toggel_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a4  080002a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a4  080002a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002a4  080002a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a4  080002a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a8  080002a8  000102a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002ac  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b5b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000475  00000000  00000000  00020b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00021180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f7a  00000000  00000000  000212b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001678  00000000  00000000  00022232  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00052bea  00000000  00000000  000238aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00076494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e8  00000000  00000000  00076510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800028c 	.word	0x0800028c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800028c 	.word	0x0800028c

08000108 <main>:
#define GPIO_PortA 0x40010800

#define Rcc_ABP2ENR *(Vuint32*)(0x40021000+0x18)
#define GPIO_Crh *(Vuint32*)(0x40010800+0x04)
#define GPIO_Odr *(Vuint32*)(0x40010800+0x0c)
int main(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	Rcc_ABP2ENR =Rcc_ABP2ENR|(1<<2);
 800010e:	4b1b      	ldr	r3, [pc, #108]	; (800017c <main+0x74>)
 8000110:	681a      	ldr	r2, [r3, #0]
 8000112:	4b1a      	ldr	r3, [pc, #104]	; (800017c <main+0x74>)
 8000114:	2104      	movs	r1, #4
 8000116:	430a      	orrs	r2, r1
 8000118:	601a      	str	r2, [r3, #0]
	GPIO_Crh &=(0xff0fffff);
 800011a:	4b19      	ldr	r3, [pc, #100]	; (8000180 <main+0x78>)
 800011c:	681a      	ldr	r2, [r3, #0]
 800011e:	4b18      	ldr	r3, [pc, #96]	; (8000180 <main+0x78>)
 8000120:	4918      	ldr	r1, [pc, #96]	; (8000184 <main+0x7c>)
 8000122:	400a      	ands	r2, r1
 8000124:	601a      	str	r2, [r3, #0]
	GPIO_Crh |=(0x00200000);
 8000126:	4b16      	ldr	r3, [pc, #88]	; (8000180 <main+0x78>)
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	4b15      	ldr	r3, [pc, #84]	; (8000180 <main+0x78>)
 800012c:	2180      	movs	r1, #128	; 0x80
 800012e:	0389      	lsls	r1, r1, #14
 8000130:	430a      	orrs	r2, r1
 8000132:	601a      	str	r2, [r3, #0]
	while(1){

		GPIO_Odr|=(1<<13);
 8000134:	4b14      	ldr	r3, [pc, #80]	; (8000188 <main+0x80>)
 8000136:	681a      	ldr	r2, [r3, #0]
 8000138:	4b13      	ldr	r3, [pc, #76]	; (8000188 <main+0x80>)
 800013a:	2180      	movs	r1, #128	; 0x80
 800013c:	0189      	lsls	r1, r1, #6
 800013e:	430a      	orrs	r2, r1
 8000140:	601a      	str	r2, [r3, #0]
		for( int i=0;i<500;i++);
 8000142:	2300      	movs	r3, #0
 8000144:	607b      	str	r3, [r7, #4]
 8000146:	e002      	b.n	800014e <main+0x46>
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	3301      	adds	r3, #1
 800014c:	607b      	str	r3, [r7, #4]
 800014e:	687a      	ldr	r2, [r7, #4]
 8000150:	23f4      	movs	r3, #244	; 0xf4
 8000152:	33ff      	adds	r3, #255	; 0xff
 8000154:	429a      	cmp	r2, r3
 8000156:	ddf7      	ble.n	8000148 <main+0x40>
		GPIO_Odr&=(~(1<<13));
 8000158:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <main+0x80>)
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	4b0a      	ldr	r3, [pc, #40]	; (8000188 <main+0x80>)
 800015e:	490b      	ldr	r1, [pc, #44]	; (800018c <main+0x84>)
 8000160:	400a      	ands	r2, r1
 8000162:	601a      	str	r2, [r3, #0]
		for(int i=0;i<500;i++);
 8000164:	2300      	movs	r3, #0
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	e002      	b.n	8000170 <main+0x68>
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	603b      	str	r3, [r7, #0]
 8000170:	683a      	ldr	r2, [r7, #0]
 8000172:	23f4      	movs	r3, #244	; 0xf4
 8000174:	33ff      	adds	r3, #255	; 0xff
 8000176:	429a      	cmp	r2, r3
 8000178:	ddf7      	ble.n	800016a <main+0x62>
		GPIO_Odr|=(1<<13);
 800017a:	e7db      	b.n	8000134 <main+0x2c>
 800017c:	40021018 	.word	0x40021018
 8000180:	40010804 	.word	0x40010804
 8000184:	ff0fffff 	.word	0xff0fffff
 8000188:	4001080c 	.word	0x4001080c
 800018c:	ffffdfff 	.word	0xffffdfff

08000190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000194:	46c0      	nop			; (mov r8, r8)
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800019a:	b580      	push	{r7, lr}
 800019c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800019e:	e7fe      	b.n	800019e <HardFault_Handler+0x4>

080001a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001a4:	46c0      	nop			; (mov r8, r8)
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}

080001aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001aa:	b580      	push	{r7, lr}
 80001ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001ae:	46c0      	nop			; (mov r8, r8)
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001b8:	f000 f832 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001bc:	46c0      	nop			; (mov r8, r8)
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c2:	b580      	push	{r7, lr}
 80001c4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}

080001cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001cc:	480d      	ldr	r0, [pc, #52]	; (8000204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d2:	490e      	ldr	r1, [pc, #56]	; (800020c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d4:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <LoopForever+0xe>)
  movs r3, #0
 80001d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d8:	e002      	b.n	80001e0 <LoopCopyDataInit>

080001da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001de:	3304      	adds	r3, #4

080001e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e4:	d3f9      	bcc.n	80001da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e6:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e8:	4c0b      	ldr	r4, [pc, #44]	; (8000218 <LoopForever+0x16>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001ec:	e001      	b.n	80001f2 <LoopFillZerobss>

080001ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f0:	3204      	adds	r2, #4

080001f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f4:	d3fb      	bcc.n	80001ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f6:	f7ff ffe4 	bl	80001c2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001fa:	f000 f823 	bl	8000244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fe:	f7ff ff83 	bl	8000108 <main>

08000202 <LoopForever>:

LoopForever:
    b LoopForever
 8000202:	e7fe      	b.n	8000202 <LoopForever>
  ldr   r0, =_estack
 8000204:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800020c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000210:	080002ac 	.word	0x080002ac
  ldr r2, =_sbss
 8000214:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000218:	20000024 	.word	0x20000024

0800021c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800021c:	e7fe      	b.n	800021c <ADC1_IRQHandler>
	...

08000220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	001a      	movs	r2, r3
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	18d2      	adds	r2, r2, r3
 8000230:	4b03      	ldr	r3, [pc, #12]	; (8000240 <HAL_IncTick+0x20>)
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	20000000 	.word	0x20000000
 8000240:	20000020 	.word	0x20000020

08000244 <__libc_init_array>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2600      	movs	r6, #0
 8000248:	4d0c      	ldr	r5, [pc, #48]	; (800027c <__libc_init_array+0x38>)
 800024a:	4c0d      	ldr	r4, [pc, #52]	; (8000280 <__libc_init_array+0x3c>)
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	10a4      	asrs	r4, r4, #2
 8000250:	42a6      	cmp	r6, r4
 8000252:	d109      	bne.n	8000268 <__libc_init_array+0x24>
 8000254:	2600      	movs	r6, #0
 8000256:	f000 f819 	bl	800028c <_init>
 800025a:	4d0a      	ldr	r5, [pc, #40]	; (8000284 <__libc_init_array+0x40>)
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <__libc_init_array+0x44>)
 800025e:	1b64      	subs	r4, r4, r5
 8000260:	10a4      	asrs	r4, r4, #2
 8000262:	42a6      	cmp	r6, r4
 8000264:	d105      	bne.n	8000272 <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	00b3      	lsls	r3, r6, #2
 800026a:	58eb      	ldr	r3, [r5, r3]
 800026c:	4798      	blx	r3
 800026e:	3601      	adds	r6, #1
 8000270:	e7ee      	b.n	8000250 <__libc_init_array+0xc>
 8000272:	00b3      	lsls	r3, r6, #2
 8000274:	58eb      	ldr	r3, [r5, r3]
 8000276:	4798      	blx	r3
 8000278:	3601      	adds	r6, #1
 800027a:	e7f2      	b.n	8000262 <__libc_init_array+0x1e>
 800027c:	080002a4 	.word	0x080002a4
 8000280:	080002a4 	.word	0x080002a4
 8000284:	080002a4 	.word	0x080002a4
 8000288:	080002a8 	.word	0x080002a8

0800028c <_init>:
 800028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000292:	bc08      	pop	{r3}
 8000294:	469e      	mov	lr, r3
 8000296:	4770      	bx	lr

08000298 <_fini>:
 8000298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029e:	bc08      	pop	{r3}
 80002a0:	469e      	mov	lr, r3
 80002a2:	4770      	bx	lr
